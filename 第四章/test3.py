# 1．NumPy的作用：
# (1)提供了一个具有矢量算术运算和复杂广播功能的快速且节省空间的多维数组对象ndarray。
# (2)用于对数组执行元素级计算以及直接对数组执行数学运算的函数。
# (3)用于读写硬盘上基于数组的数据集的工具，以及用于操作内存映射文件的工具。
# (4)提供了线性代数、随机数生成以及傅立叶变换功能。
# (5)用于集成由C、C++、Fortran等语言编写的代码的工具。
# (6)在数据分析方面，NumPy还可作为在算法之间传递数据的容器。
# SciPy的作用：
# SciPy是建立在NumPy基础之上，增加了众多的数学、科学以及工程计算中常用的库函数。它增加的功能包括插值、积分、最优化、统计、线性代数、傅里叶变换、
# 图像处理和常微分方程求解器等一些专用函数。
# 在Python中使用NumPy的好处:
# （1）在数值计算时，使用NumPy能够直接对数组和矩阵进行操作，由此可以省略许多处理数值计算的循环语句。同时，由于NumPy拥有众多的数学函数，因此会让编
#     写代码的工作轻松许多。而思NumPy的底层算法在设计时就有着优异的性能，并且经受住了时间的考验。
# （2）NumPy中数组的存储效率和输入输出性能均远远优于Python中等价的基本数据结构（如嵌套的list 容器），其能够提升的性能与数组中元素的数目成比例。
#     对于大型数组的运算，使用NumPy有很大的优势。对于TB 级的大文件，NumPy 使用内存映射文件来处理，以达到最优的数据读写性能。不过，NumPy数组的
#     通用性不及Python 提供的 list容器，因此在科学计算之外的领域，NumPy的优势也就不那么明显了。
# （3）NumPy 的大部分代码都是用C语言编写的，这使NumPy 比纯 Python 代码高效得多。NumPy同样支持C语言的API，并且允许在C源代码上做更多的功能拓展。
# （4)NumPy 通常与 SciPy(Scientific Python）和Matplotlib（绘图库）一起使用，这这种组合广泛用于替代MATLAB，而MATLAB是一种流行的高级技术计算语言。
# （5）NumPy是开源的库。
# 2. 创建数组对象的基本方法：NumPy提供的array()函数可以创建一维或多维数组。
#    是linspace()。
# 3. eye()函数和identity()函数用来生成主对角线上的元素为1，其他元素为0的数组。
#    ones()函数用来创建元素全部为1的数组
#    用empty函数创建指定形状和只分配内存空间的数组，而数组中的所有元素都未初始化。
# 4. 维度：ndim，尺寸：shape，元素总数：size，元素类型：dtype
# 5. 用astype()


import numpy as np

a = [6, 2, 5, 0, 1, 3, 4, 7, 8, 9]
b = ['2', '3', '1', 5, 7]
arr1 = np.array(a)
arr1.shape = (2, 5)
arr2 = np.array(b, dtype=int)
arr2.shape = (1, 5)
arr3 = arr1 + arr2
print(arr3)



